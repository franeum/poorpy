/* Companion source code for "flex & bison", published by O'Reilly
 * Media, ISBN 978-0-596-15597-1
 * Copyright (c) 2009, Taughannock Networks. All rights reserved.
 * See the README file for license conditions and contact info.
 * $Header: /home/johnl/flnb/code/RCS/fb1-5.y,v 2.1 2009/11/08 02:53:18 johnl Exp $
 */

/* simplest version of calculator */

%{
#include <stdio.h>
#include <math.h>
#include <Python.h>

main()
{
    Py_Initialize();
    printf("> "); 
    yyparse();
    Py_FinalizeEx();
}

yyerror(char *s)
{
    fprintf(stderr, "error: %s\n", s);
}

int yywrap()
{
	return 1;
}
%}

/* declare tokens */
%token NUMBER
%token ADD MINUS TIMES DIV POWER OP CP
%token EOL COMMA FUNCTION

%%

calclist:
 | calclist exp EOL { printf("%d\n> ", $2); }
 | calclist EOL { printf("> "); }
 ;


exp: factor 
    /* | exp ADD exp       { $$ = $1 + $3; } */
    | exp ADD exp       
    {
        // PyObject* PyObject_CallMethod(PyObject *obj, const char *name, const char *format, ...)
        PyObject *addendum1 = PyLong_FromLong($1);
        PyObject *addendum2 = PyLong_FromLong($3);
        PyObject *fun = PyUnicode_DecodeLocale("__add__", NULL);
        PyObject *summa = PyObject_CallMethodOneArg(addendum1, fun, addendum2);
        long value = PyLong_AsLong(summa);
        $$ = value;
    }
    | exp MINUS exp     { $$ = $1 - $3; }
    ;

factor: inside
    | factor TIMES factor { $$ = $1 * $3; }
    | factor DIV factor   { $$ = $1 / $3; }
    ;

inside: func
    | exp POWER exp       { $$ = pow($1, $2); }
    ;

func: parenthesized
    | FUNCTION OP argument CP
    ;

argument: NUMBER 
    | COMMA NUMBER 
    ;

parenthesized: NUMBER 
    | OP exp CP           { $$ = $2; }
    ;

%%
